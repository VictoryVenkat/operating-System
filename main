#include<stdio.h>
#include<conio.h>
int main()
{
  printf("\n\n\n----------------------- Scheduling -----------------------\n\n\n\n");
  long int n,j=0,k=0;
  printf("Enter Number of Processes : ");
  scanf("%ld",&n ); 
  double priority[n],avg_waiting,avg_turnaround,burstTime[n],arrivalTime[n],waitingTime[n],turnaroundTime[n], process[n], temp, completionTime[n],min,sum=0,sum2=0,wait_final, turnaround_final, wait_avg, turnaround_avg;
  for(j=0;j<n;j++)
  {
    printf("\nEnter Burst Time for Process [%d] : ", j+1 );
    scanf("%lf", &burstTime[j]);
    printf("Enter Arrival Time for Process [%d] : ", j+1 );
    scanf("%lf", &arrivalTime[j] );
    process[j]=j+1;
  }

  printf("\n\n\n\n\n -------------- Entered Values are --------------\n\n");
  printf("\n\n\n---------------------------------------\n");
  printf("\n\n\n| Process | Arrival Time | Burst Time |\n");
  printf("\n\n\n---------------------------------------\n");
  for(j=0;j<n;j++)
  {
    printf("\n\n\n|  P[%0.0lf]   |       %0.0lf      |     %0.0lf      |\n",process[j],arrivalTime[j],burstTime[j]);
  }
    printf("\n\n\n---------------------------------------\n");


  printf("\n\n\n\n\n-------- Sorting Processes according to Arrivaltime --------\n");

  for(j=0;j<n;j++)
  {
    for(k=0;k<n;k++)
    {
      if(arrivalTime[j]<arrivalTime[k])
      {
        
        temp = burstTime[k];
        burstTime[k] = burstTime[j];
        burstTime [j] = temp;
	
	      temp = process[k];
        process[k] = process[j];
        process[j] = temp;

	      temp = arrivalTime[k];
        arrivalTime[k] = arrivalTime[j];
        arrivalTime[j] = temp;
      
      }
    }
  }
  printf("\n\n\n\n\n -------------- Now Values are --------------\n\n");
  printf("\n\n\n---------------------------------------\n");
  printf("\n\n\n| Process | Arrival Time | Burst Time |\n");
  printf("\n\n\n---------------------------------------\n");
  for(j=0;j<n;j++)
  {
    printf("\n\n\n|  P[%0.0lf]   |       %0.0lf      |     %0.0lf      |\n",process[j],arrivalTime[j],burstTime[j]);
  }
    printf("\n\n\n---------------------------------------\n");


/*Arranging the table according to Burst time,
Execution time and Arrival Time
Arrival time <= Execution time
*/


  long int i = 1;
  double b_time = 0;
  for(k=0;k<n;k++)
  {
    b_time = b_time + burstTime[k];
    min = burstTime[i];

    for(j=i;j<n;j++)
    {
      if((b_time >= arrivalTime[j])&&(burstTime[j]<min))
      {
        temp = burstTime[i];
        burstTime[i] = burstTime[j];
        burstTime[j] = temp;

        temp = arrivalTime[i];
        arrivalTime[i] = arrivalTime[j];
        arrivalTime[j] = temp;

        temp = process[i];
        process[i] = process[j];
        process[j] = temp;
      }
    }
    i++;
  }
  waitingTime[0] = 0;
  for(j=1;j<n;j++)
  {
    sum += burstTime[j-1];
    waitingTime[j] = sum - arrivalTime[j];
    wait_final += waitingTime[j]; 
  }
  wait_avg = wait_final/n;
  for(j=0;j<n;j++)
  {
    sum2 += burstTime[j];
    turnaroundTime[j] = sum2 - arrivalTime[j];
    turnaround_final += turnaroundTime[j];
  }
  turnaround_avg=turnaround_final/n;
printf("\n\n\n\n\n -------------- Now Values are --------------\n\n");
  printf("\n\n\n-----------------------------------------------------------------------------\n");
  printf("\n\n\n| Process | Arrival Time | Burst Time |  Waiting Time  |  Turn Around Time  |\n");
  printf("\n\n\n-----------------------------------------------------------------------------\n");
  for(j=0;j<n;j++)
  {
    printf("\n\n\n|  P[%0.0lf]   |       %0.0lf      |     %0.0lf      |        %0.0lf       |         %0.0lf          |\n",process[j],arrivalTime[j],burstTime[j],waitingTime[j],turnaroundTime[j]);
  }
    printf("\n\n\n-----------------------------------------------------------------------------\n");



  /*Now we have to prioritize the processes according to the formulae
      Priority = 1+ Waiting time / Estimated run time
  */
 
  
  completionTime[0] = burstTime[0];
  for(j=1;j<n;j++)
  {
    completionTime[j] = completionTime[j-1] + burstTime[j];
  }

  for(j=0;j<n;j++)
  {
    priority[j] = 1+waitingTime[j]/completionTime[j];
    printf("%lf\n",priority[j]);
  }


  printf("\n\n\n\n -------------- Final Values are --------------\n\n");
  printf("\n\n\n-----------------------------------------------------------------------------\n");
  printf("\n\n\n| Process | Arrival Time | Burst Time |  Waiting Time  |  Turn Around Time  |\n");
  printf("\n\n\n-----------------------------------------------------------------------------\n");
  printf("\n\n\n|  P[%0.0lf]   |       %0.0lf      |     %0.0lf      |        %0.0lf       |         %0.0lf          |\n",process[0],arrivalTime[0],burstTime[0],waitingTime[0],turnaroundTime[0]);
  for(j=n-1;j>0;j--)
  {
    printf("\n\n\n|  P[%0.0lf]   |       %0.0lf      |     %0.0lf      |        %0.0lf       |         %0.0lf          |\n",process[j],arrivalTime[j],burstTime[j],waitingTime[j],turnaroundTime[j]);
  }
    printf("\n\n\n-----------------------------------------------------------------------------\n");

  printf("\n\n\n\n\n\nAverage Turn Around Time : %lf",turnaround_avg);
  printf("\n\n\n\nAverage Waiting Time     : %lf\n\n",wait_avg);
	
  getch();
  return 0;
}
